c
Message.joins(:conversation) .where(conversations: { sender_id: [ id, viewer.id ], recipient_id: [ id, viewer.id ] }) .where.not(user_id: viewer.id).where(read_at: nil).count
c
Message.joins(:conversation) .where(conversations: { sender_id: [ id, viewer.id ], recipient_id: [ id, viewer.id ] }) .where.not(user_id: viewer.id).where(read_at: nil).count
c
Message.joins(:conversation) .where(conversations: { sender_id: [ id, viewer.id ], recipient_id: [ id, viewer.id ] }) .where.not(user_id: viewer.id).where(read_at: nil).count
c
Message.joins(:conversation) .where(conversations: { sender_id: [ id, viewer.id ], recipient_id: [ id, viewer.id ] }) .where.not(user_id: viewer.id).where(read_at: nil).count
c
Message.joins(:conversation) .where(conversations: { sender_id: [ id, viewer.id ], recipient_id: [ id, viewer.id ] }) .where.not(user_id: viewer.id).where(read_at: nil).count
c
Message.joins(:conversation) .where(conversations: { sender_id: [ id, viewer.id ], recipient_id: [ id, viewer.id ] }) .where.not(user_id: viewer.id).where(read_at: nil).count
self
c
self
c
viewer
self
c
self
c
self
c
self
c
Message.joins(:conversation) .where(conversations: { sender_id: [ id, viewer.id ], recipient_id: [ id, viewer.id ] }) .where.not(user_id: viewer.id).where(read_at: nil).count
c
Message.joins(:conversation) .where(conversations: { sender_id: [ id, viewer.id ], recipient_id: [ id, viewer.id ] }) .where.not(user_id: viewer.id).where(read_at: nil).count
self
c
self
viewer
Message.joins(:conversation) .where(conversations: { sender_id: [ id, viewer.id ], recipient_id: [ id, viewer.id ] }) .where.not(user_id: viewer.id).where(read_at: nil).count
self == viewer
self
c
self
c
self
self == viewer
c
self == viewer
self
c
self == viewer
Message.joins(:conversation) .where(conversations: { sender_id: [ id, viewer.id ], recipient_id: [ id, viewer.id ] }) .where.not(user_id: viewer.id).where(read_at: nil).count
Message.joins(:conversation) .where(conversations: { sender_id: [ id, viewer.id ], recipient_id: [ id, viewer.id ] }) .where.not(user_id: viewer.id) # exclude viewerâ€™s own messages .where(read_at: nil).count
Message.joins(:conversation) .where(conversations: { sender_id: [ id, viewer.id ], recipient_id: [ id, viewer.id ] }) .where.not(user_id: viewer.id) # exclude viewerâ€™s own messages .where(read_at: nil) .count
viewer
self
c
self
c
@recipient.unread_messages_count(current_user)
c
@recipient.unread_messages_count(current_user)
c
@recipient.unread_messages_count(current_user)
c
@recipient.unread_messages_count(current_user)
@recipient.unread_messages_count(current_user
c
@recipient.id
@conversation.id
c
current_user.id
conversation.id
"unread_count_user_<%= conversation.id %>_<%= current_user.id %>"
c
@message.save
@message
n
@conversation.id
c
@conversation.id
c
@conversation.id
c
 @messages.last
c
current_user.unread_messages_count()
@recipient&.id
current_user.unread_messages_count(@recipient&.id)
@recipient.unread_messages_count(current_user)
current_user
@recipient
@recipient&.id
@recipient.unread_messages_count(current_user)
c
params
params[:recipient_id]
c
params
@recipient&.id
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
message
current_user
c
current_user
c
current_user
c
current_user
c
@message.save
c
cc
c
cc
c
n
c
@current_user
current_user
c
message
message.id
c
current_user
c
message
c
message
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
@new_message
@conversation
c
@new_message
c
current_user
n
current_user
c
current_user
message.user == current_user
message.user
c
n
@conversation
